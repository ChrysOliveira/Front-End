{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","listaDeNegociacoes","posicaoAtual","result","valorAtual","value","push","_data","_quantidade","_valor","continue","limpeza","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AAEjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAGpC,gCAAIC,UAAU,MAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,MAAKN,MAAN,CAA7B,EAA4C,WAA5C,EACTO,WADS,CACG,MAAKP,MADR,EAETQ,GAFS,CAELP,UAFK,CAAd;;AAIAI,oCAAQI,SAAR,GAAoB,aAAK;;AAErBN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAjBM,CAAP;AAmBH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,UAA5C,EACRO,WADQ,CACI,OAAKP,MADT,EAERiB,UAFQ,EAAb;;AAIA,gCAAIC,qBAAqB,EAAzB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;;AAEpB,oCAAIU,eAAeN,EAAEC,MAAF,CAASM,MAA5B;;AAGA,oCAAID,YAAJ,EAAkB;;AAEd,wCAAIE,aAAaF,aAAaG,KAA9B;;AAEAJ,uDAAmBK,IAAnB,CAAwB,IAAI3B,UAAJ,CAAeyB,WAAWG,KAA1B,EAAiCH,WAAWI,WAA5C,EAAyDJ,WAAWK,MAApE,CAAxB;;AAEAP,iDAAaQ,QAAb;AACH,iCAPD,MAOO;;AAEHxB,4CAAQe,kBAAR;AACH;AACJ,6BAhBD;;AAkBAF,mCAAON,OAAP,GAAiB,aAAK;;AAElBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,8DAAP;AACH,6BAJD;AAKH,yBA/BM,CAAP;AAgCH;;;uDAEkB;AAAA;;AAEf,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIwB,UAAU,OAAK7B,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,OAAKN,MAAN,CAA7B,EAA4C,WAA5C,EACTO,WADS,CACG,OAAKP,MADR,EAET6B,KAFS,EAAd;;AAIAD,oCAAQnB,SAAR,GAAoB,aAAK;;AAErBN;AACH,6BAHD;;AAKAyB,oCAAQlB,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,oDAAP;AACH,6BAJD;AAKH,yBAhBM,CAAP;AAiBH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao'\n\nexport class NegociacaoDao {\n\n    constructor(connection) {\n\n        this._connection = connection\n        this._store = 'negociacoes'\n    }\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n\n            let request = this._connection.transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao)\n\n            request.onsuccess = e => {\n\n                resolve()\n            }\n\n            request.onerror = e => {\n\n                console.log(e.target.error)\n                reject('Nao foi possivel persistir a negociacao')\n            }\n        })\n\n    }\n\n    listaTodos() {\n        return new Promise((resolve, reject) => {\n\n            let cursor = this._connection.transaction([this._store], 'readonly')\n                .objectStore(this._store)\n                .openCursor()\n\n            let listaDeNegociacoes = []\n\n            cursor.onsuccess = e => {\n\n                let posicaoAtual = e.target.result\n\n\n                if (posicaoAtual) {\n\n                    let valorAtual = posicaoAtual.value\n\n                    listaDeNegociacoes.push(new Negociacao(valorAtual._data, valorAtual._quantidade, valorAtual._valor))\n\n                    posicaoAtual.continue()\n                } else {\n\n                    resolve(listaDeNegociacoes)\n                }\n            }\n\n            cursor.onerror = e => {\n\n                console.log(e.target.error)\n                reject('Nao foi possivel localizar nenhuma negociacao no banco local')\n            }\n        })\n    }\n\n    limpaNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            let limpeza = this._connection.transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear()\n\n            limpeza.onsuccess = e => {\n\n                resolve()\n            }\n\n            limpeza.onerror = e => {\n\n                console.log(e.target.error)\n                reject('Nao foi possivel limpar as negociacoes do db local')\n            }\n        })\n    }\n}"]}