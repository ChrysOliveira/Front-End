{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","dbVersion","stores","connection","close","ConnectionFactory","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_criaStores","e","target","result","onsuccess","bind","Error","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,Y;AACXC,qB,GAAY,C;AACZC,kB,GAAS,CAAC,aAAD,C;AAETC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;;;;;;;oDAEc;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,SAA9B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BC,wCAAQC,GAAR,CAAY,2BAAZ;;AAEAV,kDAAkBW,WAAlB,CAA8BC,EAAEC,MAAF,CAASC,MAAvC;AAEH,6BAND;;AAQAV,wCAAYW,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAACjB,UAAL,EAAiBA,aAAac,EAAEC,MAAF,CAASC,MAAtB;;AAEjBf,wCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR,CAJyB,CAIiB;AAC1CA,2CAAWC,KAAX,GAAmB,YAAM;;AAErB,0CAAM,IAAIkB,KAAJ,CAAU,8CAAV,CAAN;AACH,iCAHD;AAIAf,wCAAQJ,UAAR;AACH,6BAVD;;AAYAM,wCAAYc,OAAZ,GAAsB,aAAK;;AAEvBT,wCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASM,KAArB;AACAhB,uCAAOS,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBA7BM,CAAP;AA8BH;;;gDAEkBtB,U,EAAY;;AAE3BD,+BAAOwB,OAAP,CAAe,iBAAS;;AAEpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAND;AAOH;;;sDAEwB;;AAErB,4BAAI7B,UAAJ,EAAgB;;AAEZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const dbName = 'aluraframe',\n    dbVersion = 4,\n    stores = ['negociacoes']\n\nlet connection = null,\n    close = null\n\nexport class ConnectionFactory {\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, dbVersion)\n\n            openRequest.onupgradeneeded = e => {\n\n                console.log('Criando ou atualizando bd')\n\n                ConnectionFactory._criaStores(e.target.result)\n\n            }\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) connection = e.target.result\n\n                close = connection.close.bind(connection) //estou passando o metodo close para a variavel close antes de altera-lo\n                connection.close = () => {\n\n                    throw new Error('Voce nao deve encerrar a conexao diretamente')\n                }\n                resolve(connection)\n            }\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error)\n                reject(e.target.error.name)\n            }\n        })\n    }\n\n    static _criaStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store)\n\n            connection.createObjectStore(store, { autoIncrement: true })\n        })\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n\n            close()\n            connection = null\n        }\n    }\n}"]}