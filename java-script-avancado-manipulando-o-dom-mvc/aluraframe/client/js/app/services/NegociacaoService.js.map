{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","Negociacao","NegociacaoDao","NegociacaoService","_http","listaAtual","Promise","all","obtemNegociacoesSemana","obtemNegociacoesSemanaAnterior","obtemNegociacoesSemanaRetrasada","then","listaDeNegociacoesDoPromise","reduce","achatado","atual","concat","filter","some","negociacao","equals","negociacaoExistente","catch","console","log","error","Error","resolve","reject","get","negociacoes","map","Date","objeto","data","quantidade","valor","erro","getConnection","conexao","dao","adiciona","connection","listaTodos","limpaNegociacoes"],"mappings":";;;;;;;;;;;;;;;AAASA,uB,gBAAAA,W;;AACAC,6B,sBAAAA,iB;;AACAC,sB,qBAAAA,U;;AACAC,yB,qBAAAA,a;;;;;;;;;;;;;;;;;;;;;yCAEIC,iB;AAET,6CAAc;AAAA;;AACV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;;;iEAE4BM,U,EAAY;;AAErC,+BAAOC,QAAQC,GAAR,CAAY,CACX,KAAKC,sBAAL,EADW,EAEX,KAAKC,8BAAL,EAFW,EAGX,KAAKC,+BAAL,EAHW,CAAZ,EAKFC,IALE,CAKG;AAAA,mCAA+BC,4BAA4BC,MAA5B,CAAmC,UAACC,QAAD,EAAWC,KAAX;AAAA,uCAChED,SAASE,MAAT,CAAgBD,KAAhB,CADgE;AAAA,6BAAnC,EACL,EADK,EAEhCE,MAFgC,CAEzB;AAAA,uCAAc,CAACZ,WAAWa,IAAX,CAAgB;AAAA,2CAAuBC,WAAWC,MAAX,CAAkBC,mBAAlB,CAAvB;AAAA,iCAAhB,CAAf;AAAA,6BAFyB,CAA/B;AAAA,yBALH,EAQFC,KARE,CAQI,iBAAS;;AAEZC,oCAAQC,GAAR,CAAYC,KAAZ;AACA,kCAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH,yBAZE,CAAP;AAaH;;;6DAGwB;AAAA;;AAErB,+BAAO,IAAIpB,OAAJ,CAAY,UAACqB,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,kCAAKxB,KAAL,CAAWyB,GAAX,CAAe,oBAAf,EACKlB,IADL,CACU,uBAAe;AACjBgB,wCAAQG,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAI9B,UAAJ,CAAe,IAAI+B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BAHL,EAIKd,KAJL,CAIW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYa,IAAZ;AACAT,uCAAO,iDAAP;AACH,6BAPL;AASH,yBAXM,CAAP;AAYH;;;qEAEgC;AAAA;;AAE7B,+BAAO,IAAItB,OAAJ,CAAY,UAACqB,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,mCAAKxB,KAAL,CAAWyB,GAAX,CAAe,sBAAf,EACKlB,IADL,CACU,uBAAe;AACjBgB,wCAAQG,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAI9B,UAAJ,CAAe,IAAI+B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BAHL,EAIKd,KAJL,CAIW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYa,IAAZ;AACAT,uCAAO,0DAAP;AACH,6BAPL;AASH,yBAXM,CAAP;AAYH;;;sEAEiC;AAAA;;AAE9B,+BAAO,IAAItB,OAAJ,CAAY,UAACqB,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,mCAAKxB,KAAL,CAAWyB,GAAX,CAAe,uBAAf,EACKlB,IADL,CACU,uBAAe;AACjBgB,wCAAQG,YAAYC,GAAZ,CAAgB;AAAA,2CAAU,IAAI9B,UAAJ,CAAe,IAAI+B,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iCAAhB,CAAR;AACH,6BAHL,EAIKd,KAJL,CAIW,gBAAQ;AACXC,wCAAQC,GAAR,CAAYa,IAAZ;AACAT,uCAAO,2DAAP;AACH,6BAPL;AASH,yBAXM,CAAP;AAYH;;;6CAEQT,U,EAAY;;AAEjB,+BAAOnB,kBAAkBsC,aAAlB,GACF3B,IADE,CACG;AAAA,mCAAW,IAAIT,aAAJ,CAAkBqC,OAAlB,CAAX;AAAA,yBADH,EAEF5B,IAFE,CAEG;AAAA,mCAAO6B,IAAIC,QAAJ,CAAatB,UAAb,CAAP;AAAA,yBAFH,EAGFR,IAHE,CAGG;AAAA,mCAAM,mCAAN;AAAA,yBAHH,EAIFW,KAJE,CAII,YAAM;;AAET,kCAAM,IAAII,KAAJ,CAAU,yCAAV,CAAN;AACH,yBAPE,CAAP;AAQH;;;4CAEO;;AAEJ,+BAAO1B,kBAAkBsC,aAAlB,GACF3B,IADE,CACG;AAAA,mCAAc,IAAIT,aAAJ,CAAkBwC,UAAlB,CAAd;AAAA,yBADH,EAEF/B,IAFE,CAEG;AAAA,mCAAO6B,IAAIG,UAAJ,EAAP;AAAA,yBAFH,EAGFrB,KAHE,CAGI,gBAAQ;;AAEXC,oCAAQC,GAAR,CAAYa,IAAZ;AACA,kCAAM,IAAIX,KAAJ,CAAU,uCAAV,CAAN;AACH,yBAPE,CAAP;AASH;;;4CAEO;;AAEJ,+BAAO1B,kBAAkBsC,aAAlB,GACF3B,IADE,CACG;AAAA,mCAAW,IAAIT,aAAJ,CAAkBqC,OAAlB,CAAX;AAAA,yBADH,EAEF5B,IAFE,CAEG;AAAA,mCAAO6B,IAAII,gBAAJ,EAAP;AAAA,yBAFH,EAGFjC,IAHE,CAGG;AAAA,mCAAM,kCAAN;AAAA,yBAHH,EAIFW,KAJE,CAII,gBAAQ;;AAEXC,oCAAQC,GAAR,CAAYa,IAAZ;AACA,kCAAM,IAAIX,KAAJ,CAAU,wCAAV,CAAN;AACH,yBARE,CAAP;AASH","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService'\nimport { ConnectionFactory } from './ConnectionFactory'\nimport { Negociacao } from '../models/Negociacao'\nimport { NegociacaoDao } from '../dao/NegociacaoDao'\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService()\n    }\n\n    importaNegociacoesDasSemanas(listaAtual) {\n\n        return Promise.all([\n                this.obtemNegociacoesSemana(),\n                this.obtemNegociacoesSemanaAnterior(),\n                this.obtemNegociacoesSemanaRetrasada()\n            ])\n            .then(listaDeNegociacoesDoPromise => listaDeNegociacoesDoPromise.reduce((achatado, atual) =>\n                    achatado.concat(atual), [])\n                .filter(negociacao => !listaAtual.some(negociacaoExistente => negociacao.equals(negociacaoExistente))))\n            .catch(error => {\n\n                console.log(error)\n                throw new Error('Nao foi possivel importar as negociacoes')\n            })\n    }\n\n\n    obtemNegociacoesSemana() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n                })\n                .catch(erro => {\n                    console.log(erro)\n                    reject('Nao foi possivel obter as negociacoes da semana')\n                })\n\n        })\n    }\n\n    obtemNegociacoesSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n                })\n                .catch(erro => {\n                    console.log(erro)\n                    reject('Nao foi possivel obter as negociacoes da semana anterior')\n                })\n\n        })\n    }\n\n    obtemNegociacoesSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http.get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n                })\n                .catch(erro => {\n                    console.log(erro)\n                    reject('Nao foi possivel obter as negociacoes da semana retrasada')\n                })\n\n        })\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociacao adicionada com sucesso')\n            .catch(() => {\n\n                throw new Error('Nao foi possivel adicionar a negociacao')\n            })\n    }\n\n    lista() {\n\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n\n                console.log(erro)\n                throw new Error('Nao foi possivel obter as negociacoes')\n            })\n\n    }\n\n    limpa() {\n\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.limpaNegociacoes())\n            .then(() => 'Negociacoes apagadas com sucesso')\n            .catch(erro => {\n\n                console.log(erro)\n                throw new Error('Nao foi possivel limpar as negociacoes')\n            })\n    }\n\n\n}"]}